exit
c
n
c
n
experience_total_score
experience_total_score + skills_total_score
n
user2
user1
c
n
c
user1["skills"].present? 
n
c
user1["educations"]["values"]
user1["educations"]
e2
e1
c
UsersHelper.calculate(first_user, other_user)
re
other_user
first_user
re
result
re
e
c
e
exit
c
user2["educations"]
user2["positions"]
user2.positions
user2
user1 
c
user2
user1
c
result.preferences
re
n
c
y
exit
c
first_user
first_user[:emailAddress]
first_user[:emailAddress] == other_user[:emailAddress]
other_user
n
first_user
other_user
n
c
n
c
other_user
n
first_user
c
JSON.parse(users).count
JSON.parse(users)
users
c
exit
recommendations[:recommended_users]
recommendations
recommendations["recommended_users"]
exit
user.recommendations.first.preferences
user.recommendations.first
user.recommendations
user
exit
Skills
Skill
Recommendation
User
c
n
recommendations
n
recommendations[:recommendend_users]
result
n
result
user
other_user
c
params[:id]
n
exit
user.save!
user
c
pos
c
body
body["positions"]
c
body
body["industry"]
user.industry
user
n
user.name
n
exit
JSON.parse(response.body)
response.body
response
